// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: http.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "http.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HttpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HttpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HttpResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* HttpService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_http_2eproto() {
  protobuf_AddDesc_http_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "http.proto");
  GOOGLE_CHECK(file != NULL);
  HttpRequest_descriptor_ = file->message_type(0);
  static const int HttpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, size_),
  };
  HttpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpRequest_descriptor_,
      HttpRequest::default_instance_,
      HttpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpRequest));
  HttpResponse_descriptor_ = file->message_type(1);
  static const int HttpResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, result_),
  };
  HttpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HttpResponse_descriptor_,
      HttpResponse::default_instance_,
      HttpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HttpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HttpResponse));
  HttpService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_http_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpRequest_descriptor_, &HttpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HttpResponse_descriptor_, &HttpResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_http_2eproto() {
  delete HttpRequest::default_instance_;
  delete HttpRequest_reflection_;
  delete HttpResponse::default_instance_;
  delete HttpResponse_reflection_;
}

void protobuf_AddDesc_http_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nhttp.proto\"\033\n\013HttpRequest\022\014\n\004size\030\001 \001("
    "\005\"\036\n\014HttpResponse\022\016\n\006result\030\001 \002(\t22\n\013Htt"
    "pService\022#\n\004Echo\022\014.HttpRequest\032\r.HttpRes"
    "ponseB\003\200\001\001", 130);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "http.proto", &protobuf_RegisterTypes);
  HttpRequest::default_instance_ = new HttpRequest();
  HttpResponse::default_instance_ = new HttpResponse();
  HttpRequest::default_instance_->InitAsDefaultInstance();
  HttpResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_http_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_http_2eproto {
  StaticDescriptorInitializer_http_2eproto() {
    protobuf_AddDesc_http_2eproto();
  }
} static_descriptor_initializer_http_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int HttpRequest::kSizeFieldNumber;
#endif  // !_MSC_VER

HttpRequest::HttpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HttpRequest::InitAsDefaultInstance() {
}

HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HttpRequest::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpRequest::~HttpRequest() {
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpRequest_descriptor_;
}

const HttpRequest& HttpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpRequest* HttpRequest::default_instance_ = NULL;

HttpRequest* HttpRequest::New() const {
  return new HttpRequest;
}

void HttpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {

  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpRequest_descriptor_;
  metadata.reflection = HttpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HttpResponse::kResultFieldNumber;
#endif  // !_MSC_VER

HttpResponse::HttpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HttpResponse::InitAsDefaultInstance() {
}

HttpResponse::HttpResponse(const HttpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HttpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HttpResponse::~HttpResponse() {
  SharedDtor();
}

void HttpResponse::SharedDtor() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void HttpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpResponse_descriptor_;
}

const HttpResponse& HttpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_http_2eproto();
  return *default_instance_;
}

HttpResponse* HttpResponse::default_instance_ = NULL;

HttpResponse* HttpResponse::New() const {
  return new HttpResponse;
}

void HttpResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::kEmptyString) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HttpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HttpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HttpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HttpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HttpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HttpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HttpResponse::MergeFrom(const HttpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HttpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpResponse::CopyFrom(const HttpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HttpResponse::Swap(HttpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HttpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HttpResponse_descriptor_;
  metadata.reflection = HttpResponse_reflection_;
  return metadata;
}


// ===================================================================

HttpService::~HttpService() {}

const ::google::protobuf::ServiceDescriptor* HttpService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* HttpService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return HttpService_descriptor_;
}

void HttpService::Echo(::google::protobuf::RpcController* controller,
                         const ::HttpRequest*,
                         ::HttpResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void HttpService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), HttpService_descriptor_);
  switch(method->index()) {
    case 0:
      Echo(controller,
             ::google::protobuf::down_cast<const ::HttpRequest*>(request),
             ::google::protobuf::down_cast< ::HttpResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& HttpService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::HttpRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& HttpService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::HttpResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

HttpService_Stub::HttpService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
HttpService_Stub::HttpService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
HttpService_Stub::~HttpService_Stub() {
  if (owns_channel_) delete channel_;
}

void HttpService_Stub::Echo(::google::protobuf::RpcController* controller,
                              const ::HttpRequest* request,
                              ::HttpResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
